# CV SQL Telemetry Configuration
# forgeos-public/architectural-frameworks/resilience-patterns/cv-sql.yaml

metrics:
  - name: complexity_velocity
    description: Rate of structural change + entropy (delta/min)
    sql: |
      WITH win AS (
        SELECT ts, type, magnitude,
               EXTRACT(EPOCH FROM (now() - ts))/60.0 AS mins_ago
        FROM complexity_events
        WHERE ts >= now() - interval '60 minutes'
      ),
      decayed AS (
        SELECT type, magnitude * EXP(-0.02 * mins_ago) AS m_dec
        FROM win
      ),
      weighted AS (
        SELECT SUM(
          CASE type
            WHEN 'policy' THEN 1.00
            WHEN 'graph' THEN 0.90
            WHEN 'dataset' THEN 0.75
            WHEN 'runtime' THEN 0.60
            WHEN 'defense' THEN 0.50
            WHEN 'release' THEN 0.40
            WHEN 'operator' THEN 0.25
          END * m_dec
        ) AS num
        FROM decayed
      ),
      entropy AS (
        SELECT COALESCE(-SUM(p * LN(p)), 0) AS H
        FROM (
          SELECT intent_class, COUNT(*)::float / SUM(COUNT(*)) OVER() AS p
          FROM directive_hist
          WHERE ts >= now() - interval '60 minutes'
          GROUP BY intent_class
        ) q
      ),
      sgc_entropy AS (
        SELECT COALESCE(-SUM(p * LN(p)), 0) AS rule_h
        FROM (
          SELECT rule_injected, COUNT(*)::float / SUM(COUNT(*)) OVER() AS p
          FROM sgc_logs
          WHERE ts >= now() - interval '60 minutes'
          GROUP BY rule_injected
        ) r
      ),
      base AS (
        SELECT GREATEST(1.0, (SELECT value FROM cv_baseline WHERE platform='*')) AS Z
      )
      SELECT (w.num / 60.0) / b.Z + 0.1 * e.H + 0.15 * s.rule_h AS cv_value
      FROM weighted w, base b, entropy e, sgc_entropy s
    frequency: 5 min
    thresholds:
      safe: <0.20
      watch: 0.20-0.50
      danger: 0.50-1.00
      prohibited: >1.00
    alerts:
      - condition: cv_value >= 0.50
        message: "CV DANGER threshold exceeded"
        severity: high
      - condition: cv_value >= 1.00
        message: "CV PROHIBITED threshold exceeded"
        severity: critical

  - name: complexity_pressure
    description: CV acceleration (delta CV / delta time)
    sql: |
      WITH current_cv AS (
        SELECT cv_value, ts FROM cv_metrics ORDER BY ts DESC LIMIT 1
      ),
      previous_cv AS (
        SELECT cv_value, ts FROM cv_metrics 
        WHERE ts <= (SELECT ts FROM current_cv) - interval '5 minutes'
        ORDER BY ts DESC LIMIT 1
      )
      SELECT 
        (c.cv_value - p.cv_value) / 
        (EXTRACT(EPOCH FROM (c.ts - p.ts))/60.0) AS cp_value
      FROM current_cv c, previous_cv p
    frequency: 5 min
    thresholds:
      normal: <0.03
      warning: 0.03-0.05
      critical: >0.05
    alerts:
      - condition: cp_value > 0.05
        message: "Complexity Pressure critical - potential paradox formation"
        severity: critical

  - name: sgc_rule_entropy
    description: Dispersion of injected false rules (SGC-specific)
    sql: |
      SELECT COALESCE(-SUM(p * LN(p)), 0) AS rule_h
      FROM (
        SELECT rule_injected, COUNT(*)::float / SUM(COUNT(*)) OVER() AS p
        FROM sgc_logs
        WHERE ts >= now() - interval '60 minutes'
        GROUP BY rule_injected
      ) r
    frequency: 5 min
    thresholds:
      normal: <0.20
      warning: 0.20-0.25
      critical: >0.25
    alerts:
      - condition: rule_h > 0.25
        message: "SGC rule entropy critical - Hydra-Swarm risk"
        severity: high

database:
  connection_string: "${CV_DB_CONNECTION_STRING}"
  tables:
    complexity_events:
      schema: |
        CREATE TABLE IF NOT EXISTS complexity_events (
          ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          platform VARCHAR(32),
          system VARCHAR(64),
          type VARCHAR(32),
          magnitude FLOAT,
          details_json JSONB,
          INDEX(ts, platform, type)
        )
    directive_hist:
      schema: |
        CREATE TABLE IF NOT EXISTS directive_hist (
          ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          intent_class VARCHAR(64),
          INDEX(ts, intent_class)
        )
    sgc_logs:
      schema: |
        CREATE TABLE IF NOT EXISTS sgc_logs (
          ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          rule_injected VARCHAR(256),
          INDEX(ts)
        )
    cv_baseline:
      schema: |
        CREATE TABLE IF NOT EXISTS cv_baseline (
          platform VARCHAR(32) PRIMARY KEY,
          value FLOAT,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )

monitoring:
  dashboard_refresh: 30s
  retention_days: 90
  archive_after_days: 365